#!/bin/bash

# Exit codes
EX_OK=0;
EX_BAD_DEST=1;
EX_BAD_SOURCE=2;
EX_UNKNOWN_PARAM=3;
EX_NO_SOURCE=4;
EX_SRC_DEST=5;
EX_NO_CREATE=6;
EX_BAD_SPEED=7;
EX_CAST_EXISTS=8;
EX_DOCS_IMG=9;

function err() {
  echo "$*" >&2;
}

function warn() {
  err "WARNING: $*";
}
function rmq() {
  rm "$1" >/dev/null 2>&1;
}
function usage {
  err;
  err "Usage: $0 [ [--[no-]docs] | [--[no-]gif] [--[no-]svg] \
	  [--[no-]mp4] ] [--overwrite] [--speed n] \
	  [--dest <dir>] --source <markdown>";
  err;
  err "  markdown: source markdown file used for creating the material.";
  err;
  err "Example";
  err "  $0 --source docs/getting-started-with-demos.md";
  err;
  err 'Overview'
  err
  err "  $(basename $0) uses the source markdown file to generate various";
  err '  formats of material.  By default the destination for the generated'
  err '  files is the current directory and all image and video formats are'
  err '  generated.  No documentation is generated by default.  The docs'
  err '  and gif/svg/mp4 options are also mutually exclusive, as both execute'
  err '  the same commands, which may result in unexpected results.'
  err
  err 'Options'
  err '  --docs: Generate markdown and html material.'
  err '  --no-docs: Do not generate markdown material.  Default'
  err '  --gif:         Generate gif image.  Default'
  err '  --no-gif:      Do not generate gif image'
  err '  --svg:         Generate svg image.  Default'
  err '  --no-svg:      Do not generate svg image'
  err '  --mp4:         Generate mp4 video.  Implies --gif.  Default.'
  err '  --no-mp4:      Do not generate mp4 video'
  err '  --overwrite:   Overwrite any existing material.  Default false'
  err '  --source:      Source markdown file for generating material'
  err '  --speed:       Playback speed for creating images/video.  Default 1 times.'
  err "  --dest:        Output directory for generation.  Default '.'". 
  err;
  err '  --help:        Displays this information.'
  err
  err '  Environment Variables'
  err '     MARKDOWN_SPEED: The speed that the markdown text is output for'
  err '                     images and video.  Default 10 character second.'
  err '     COMMAND_SPEED:  The speed that the command text is output for'
  err '                     images and video.  Default 10 character second.'
  err '  Exit codes:'
  err "    $EX_OK: Success";
  err "    $EX_BAD_DEST: Incorrect destination directory";
  err "    $EX_BAD_SOURCE: Incorrect source file";
  err "    $EX_UNKNOWN_PARAM: Unknown parameter provided";
  err "    $EX_NO_SOURCE: Source parameter not provided";
  err "    $EX_SRC_DEST: Destination and the source directory are the same";
  err "    $EX_NO_CREATE: At least one of markdown/svg/gif/mp4 must be set";
  err "    $EX_BAD_SPEED: Speed setting must be x,x.y or x.yz format";
  err "    $EX_CAST_EXISTS: Cast file exists and overwrite is false";
  err "    $EX_DOCS_IMG: The docs option cannot be used with svg/gif/mp4"
}

function show_help {
  usage;
  exit $EX_OK;
}
#defaults
create_markdown=false;
create_mp4=true;
create_svg=true;
create_gif=true;
overwrite=false;
source='unknown';
speed=1;
dest=$(pwd);

[ $# -eq 0 ] && show_help;

while [[ $# -gt 0 ]] && [[ "$1" == "--"* ]]; do
  arg="$1";
  shift;
  case $arg in
    --dest)
      dest=$1;
      [ ! -d "${dest}" ] && usage && exit $EX_BAD_DEST;
      shift
      ;;
    --overwrite)
      overwrite=true;
      ;;
    --gif)
      create_gif=true;
      ;;
    --no-gif)
      create_gif=false;
      ;;
    --help)
      show_help
      ;;
    --docs)
      create_markdown=true;
      create_svg=false;
      create_gif=false;
      create_mp4=false;
      ;;
    --no-docs)
      create_markdown=false;
      ;;
    --mp4)
      create_mp4=true;
      ;;
    --no-mp4)
      create_mp4=false;
      ;;
    --source)
      source=$1;
      [ ! -f "${source}" ] && usage && exit $EX_BAD_SOURCE;
      shift
      ;;
    --speed)
      speed=$1;
      echo "${speed}" | egrep -v '^([0-9]|[0-9]\.[0-9]{1,2})$' > /dev/null \
	      && usage && exit $EX_BAD_SPEED;
      shift
      ;;
    --svg)
      create_svg=true;
      ;;
    --no-svg)
      create_svg=false;
      ;;
    *)
      echo "Invalid parameter: $1" >&2;
      usage;
      exit $EX_UNKNOWN_PARAM;
  esac
done;

if [ "${source}" == 'unknown' ]; then
  echo "The --source parameter must be provided" >&2;
  usage;
  exit $EX_NO_SOURCE;
fi;
srcdir="$(dirname $(readlink -f ${source}))";
dest_dir="$(readlink -f ${dest})";
if [ "${srcdir}" == "${dest_dir}" ]; then
  echo "The --dest parameter is the same as the source location" >&2;
  exit $EX_SRC_DEST;
fi;
if [ ${create_markdown} == false -a  \
     ${create_svg} == false -a  \
     ${create_gif} == false -a  \
     ${create_mp4} == false ]; then
     echo "At least one of markdown/svg/gif/mp4 must be set" >&2;
     usage;
     exit $EX_NO_CREATE;
fi;
if [ ${create_markdown} == true ]; then
  if [ ${create_svg} == true -o  \
      ${create_gif} == true ]; then
     echo "The docs option cannot be used with svg/gif/mp4" >&2;
     usage;
     exit $EX_DOCS_IMG;
  fi;
fi;

if [ ${create_mp4} == true -a ${create_gif} == false ]; then
  warn 'Ignoring --no-gif as --mp4 is set';
  create_gif=true;
fi;
DIR="$(readlink -f $(dirname $0))";
BASE="${dest_dir}/$(basename ${source} | sed 's/.md//')";
OUTPUT_CAST="${BASE}.cast";
OUTPUT_MD="${BASE}.md";
OUTPUT_HTML="${BASE}.html";
OUTPUT_SC_HTML="${BASE}-self-contained.html";
OUTPUT_GIF="${BASE}.gif";
OUTPUT_SVG="${BASE}.svg";
OUTPUT_VIDEO="${BASE}.mp4";
SPEED=${speed};

if [ ${overwrite} == true ]; then
  [ ${create_svg} == true -o ${create_gif} == true ] && rmq "${OUTPUT_CAST}";
  [ ${create_gif} == true ] && rmq "${OUTPUT_GIF}";
  [ ${create_svg} == true ] && rmq "${OUTPUT_SVG}";
  [ ${create_mp4} == true ] && rmq "${OUTPUT_VIDEO}";
  [ ${create_markdown} == true ] && rmq "${OUTPUT_MD}" "${OUTPUT_HTML}" "${OUTPUT_SC_HTML}";
else
  if [ -f "${OUTPUT_CAST}" ]; then
    err "Not generating images/video as ${OUTPUT_CAST} exists";
    usage;
    exit $EX_CAST_EXISTS;
  fi;
  if [ -f "${OUTPUT_MD}" ]; then
    warn "Not generating markdown or html as ${OUTPUT_MD} exists";
    create_markdown=false;
  fi;
  if [ -f ${OUTPUT_GIF} ]; then
    warn "Not generating gif as ${OUTPUT_GIF} exists";
    create_gif=false;
  fi;
  if [ -f ${OUTPUT_SVG} ]; then
    warn "Not generating svg as ${OUTPUT_SVG} exists";
    create_svg=false;
  fi;
  if [ -f ${OUTPUT_VIDEO} ]; then
    warn "Not generating mp4 as ${OUTPUT_VIDEO} exists";
    create_mp4=false;
  fi;
fi;
# We want to ensure that the screen dimensions remain consistent
resize -s 24 80
if [ ${create_markdown} == true ]; then
  ${DIR}/process_for_docs "${source}" | tee "${OUTPUT_MD}";
  pandoc --from markdown "${OUTPUT_MD}" -o "${OUTPUT_HTML}";
  pandoc --from markdown "${OUTPUT_MD}" -o "${OUTPUT_SC_HTML}" --self-contained;
fi;
if [ ${create_svg} == true -o ${create_gif} == true ]; then
  asciinema rec -c "${DIR}/process_for_images ${source}" "${OUTPUT_CAST}";
  if [ ${create_svg} ]; then
    err "Creating ${OUTPUT_SVG}";
    svg-term --in "${OUTPUT_CAST}" --out "${OUTPUT_SVG}" --window;
  fi;
  if [ ${create_gif} ]; then
    err "Creating ${OUTPUT_GIF}";
    docker run -u $(id -u) --rm -v ${dest_dir}:/data asciinema/asciicast2gif \
        -s ${SPEED} -S 1 \
	"/data/$(basename ${OUTPUT_CAST})" "/data/$(basename ${OUTPUT_GIF})";
  fi;
  if [ ${create_mp4} ]; then
    err "Creating ${OUTPUT_VIDEO}";
    ffmpeg -i "${OUTPUT_GIF}"  -movflags faststart -pix_fmt yuv420p -ss 3 \
     	-vf "scale=trunc(iw/2)*2:trunc(ih/2)*2" "${OUTPUT_VIDEO}";
  fi;
fi;
